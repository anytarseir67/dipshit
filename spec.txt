brainfuck-like "cell" structure
"banks" of arrays of cells

banks 0 and 1 are `reserved` and should not be used for general storage
bank 0 : stores argv
bank 1 : arguments bank, used to define loop lengths, set number to multiply by, number to divide by, etc.

operators:

    ` switch to the next bank
    ~ switch to the previous bank
    < - move the selection to the left within the current bank(changes what is selected, not any values)
    > - move the selection to the right within the current bank
    + increment the selected cell
    - decrement the selected cell
    | return to the origin cell
    # print selected cell to stdout
    % set all cells in the current bank to 0
    ! invert all cells in the current bank
    @ prints the entire cell array to stdout, terminated by `-1`
    ^ calls the entire cell array on the command line (idk why i added this), terminated by `-1`
    * increment the entire current bank
    $ decrement the entire current bank
    [] code within is run `n` times, where n is the value in the current cell index, in bank 1 (nested loops are not yet supported)
    ? multiply the current cell by the value of the current cell index in bank 1
    . zeros the current cell
    " prints the entire cell array to stdout as numbers
    ' prints the current cell to stdout as a number
    = copy the value of the selected cell
    : paste the copied value into the selected cell (works across banks)
    _ no-op
    ; signifies a comment, terminated with a line break

reserved:

    {} will be used for conditionals
    / will be used for division

TODO:
conditionals
argv in bank 0 (not difficult, just low priority)
division (not sure how i should handle floats)
